{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let tokenPortInOtherChain = match(getBinary(this, "tokenPortInOtherChain")) {
    case b: ByteVector => b
    case _ => throw("tokenPortInOtherChain is not defined")
}

let chainCollector = match(getBinary(this, "chainCollector")) {
    case b: ByteVector => Address(b)
    case _ => throw("chainCollector is not defined")
}

func transactionsRootAt(height: Int) = {
    match(getBinary(chainCollector, toString(height) + "_transactionsRoot")) {
        case b: ByteVector => b
        case _ => throw("Block info not found")
    }
}

func assetIdToString(assetId: ByteVector|Unit) = {
    match(assetId) {
        case assetId: ByteVector => assetId.toBase58String()
        case _ =>  "WAVES"
    }
}

func assetIdFromString(asset: String) = {
    if (asset == "WAVES")
    then unit
    else asset.fromBase58String()
}

@Callable(i)
func withdraw(txBytes: ByteVector, blockHeight: Int, merkleProof: ByteVector) = {
    let transferTx = transactionFromProtoBytes(txBytes).value()
    let merkleRoot = transactionsRootAt(blockHeight)

    let assetKey = assetIdToString(transferTx.assetId) + "_asset"
    let assetInThisChain = match(getString(this, assetKey)) {
        case s: String => s.assetIdFromString()
        case _ => throw("incorrect asset")
    }

    if (transferTx.recipient.addressFromRecipient().bytes != tokenPortInOtherChain)
    then throw("incorrect tx recipient") else

    # prohibit double spending
    let txIdKey = transferTx.id.toBase58String() + "_tx"
    if (isDefined(getBoolean(this, txIdKey)))
    then throw("this tx has already been withdrawn") else

    if (!checkMerkleProof(merkleRoot, merkleProof, txBytes))
    then throw("incorrect Merkle proof") else

    let recipient = match(transferTx.attachment) {
        case b : ByteVector => Address(b)
        case _ => throw("incorrect attachment")
    }

    [
        BooleanEntry(txIdKey, true),
        ScriptTransfer(recipient, transferTx.amount, assetInThisChain)
    ]
}